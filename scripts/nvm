#!/usr/bin/env bash

# Check if the script is being sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "This script must be sourced. Use '. nvm' instead."
    exit 1
fi

function list_versions {
    versions=()
    paths=()

    # Get all node versions
    node_versions=($(brew list --formula --version | grep "^node" | sed 's/ /__/g'))

    for formula_version in $node_versions; do
        # split by __, first part is formula, second is version
        formula="$(echo $formula_version | awk -F'__' '{print $1}')"
        version="$(echo $formula_version | awk -F'__' '{print $2}')"

        # Add to arrays
        versions+=("$version")
        paths+=("$(brew --prefix $formula)")
    done
}

function emit_versions {
    list_versions

    # Print out all versions
    echo "Available versions:"
    for ((i=1; i<=${#versions[@]}; i++)); do
        echo "[$i] ${versions[$i]}"
    done
}

function set_version {
    list_versions

    version_index=$1

    # Check if the index is valid
    if [[ $version_index =~ ^[0-9]+$ ]] && [ $version_index -ge 1 ] && [ $version_index -le ${#versions[@]} ]; then
        # Add the bin directory to the PATH
        PATH=${paths[$version_index]}/bin:$PATH
        export PATH
        echo "Using ${versions[$version_index]}"
    else
        echo "Invalid version index."
        return 1
    fi
}

function save_version {
    list_versions

    version_index=$1

    # Check if the index is valid
    if [[ $version_index =~ ^[0-9]+$ ]] && [ $version_index -ge 1 ] && [ $version_index -le ${#versions[@]} ]; then
        selected_version=${versions[$version_index]}
        selected_path=${paths[$version_index]}

        # List of rc files to be updated
        rc_files=("$HOME/.bashrc" "$HOME/.zshrc")

        # Prepare the line to be added/updated in the rc files
        new_path_line="export PATH=$selected_path/bin:\$PATH # nvm-script"

        for rc_file in "${rc_files[@]}"; do
            # Check if the rc file exists
            if [ -f "$rc_file" ]; then
                # Check if the nvm-script line already exists
                if grep -q "nvm-script" "$rc_file"; then
                    # Update the existing line (macOS version)
                    sed -i '' "/nvm-script/c\\
$new_path_line" "$rc_file"
                    echo "Updated Node version to $selected_version in $rc_file"
                else
                    # Append the new line
                    echo "" >> $rc_file
                    echo "# Setting Node version to $selected_version" >> $rc_file
                    echo "$new_path_line" >> $rc_file
                    echo "Saved Node version $selected_version to $rc_file"
                fi
            else
                echo "$rc_file not found. Skipping."
            fi
        done
    else
        echo "Invalid version index."
        return 1
    fi
}


# Check the first argument to decide what to do
if [ "$1" = "list" ]; then
    emit_versions
elif [ "$1" = "set" ]; then
    set_version $2
elif [ "$1" = "save" ]; then
    save_version $2
else
    echo "Invalid command. Use 'list' to list versions or 'set' to set a version."
fi